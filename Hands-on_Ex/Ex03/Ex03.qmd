---
title: "Hands-on Ex03"
author: "Li Ziyi"
date: 2 February 2023
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# Programming Interactive Data Visualisation with R

## Libraries to be used and studied

```{r}
pacman::p_load(ggiraph,
               plotly,
               gganimate,
               DT,
               tidyverse,
               patchwork)
```

Data to be used in this exercise remains the same as the exam data.

```{r}
exam_data <- read_csv("Data/Exam_data.csv")
```

## Tooltip effect with tooltip aesthetic (ggirafe)

Tooltip's interactivity: By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.

Based on hands-on exercise 1, usually this is how a dot plot looks like. And this is a static plot.

```{r}
p_old <- ggplot(data=exam_data,
                aes(x = MATHS)) +
  geom_dotplot(binwidth = 2.5, 
               dotsize = 0.5) +
  scale_y_continuous(NULL, 
                     breaks = NULL)

p_old
```

By using ggirafe, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Remark: svg: Scalable vector graphics, the graph would scale accordingly on different devices to preserve the image quality.

### Multiple information on tooltip

The content of the tooltip can be customised by including a list object as shown in the code chunk below. To present more information inside tooltip, a new data column could be created in order to store the information needed.

```{r}
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

And we can customize tooltip aesthetic style by adding css declarations using ops_tooltip().

Below, the background color of the tooltip and the font color has been changed.

```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```

### Displaying statistics on tooltip

Statistics can be displayed in the tooltip as an advanced way to customise tooltips. A function is built below to compute 90% confidence interval of the mean.

```{r}
tooltip <- function(y, ymax, accuracy = .01) { 
  mean <- scales::number(y, accuracy = accuracy)  
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(
                     tooltip(y, ymax))),
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, linewidth = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

## Hover effect for elements who are associatied with each other

As an instance, elements associated with defined data_id (CLASS) will be highlighted upon mouse moving over. This is the second interactive feature of ggiraph.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             #<<
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                                        
```

### Customise hover styling effect

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```

## Combining tooltip and hover effect

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, #<<
        data_id = CLASS),#<<              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```

## Click effect with onclick

Web document link with a data object will be displayed on the web browser upon mouse click.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              #<<
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                        
```

## Coordinated multiple views with ggiraph

With this coordinated, when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

To do that, two steps could be applied:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  *Patchwork* function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.

```{r}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + #<<
  scale_y_continuous(NULL,               
                     breaks = NULL)
```

```{r}
p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + #<<
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 / p2), #<<
       width_svg = 6,
       height_svg = 6,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

Take note that the data_id aesthetic is critical to link observations between plots. The tooltip aesthetic is optional but nice to have when hovering the mouse over a point.

# Interactive data visualisation using plotly methods

## Interactive scatter plot using plot_ly() method

```{r}
plot_ly(data = exam_data, 
        x = ~MATHS, 
        y = ~ENGLISH,
        color = ~RACE,
        colors = "Set1")
```

## Customising tooltip

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,
        text = ~paste("Student ID:", ID,     
                      "<br>Class:", CLASS),  
        color = ~RACE, 
        colors = "Set1") %>%
  layout(title = 'English Score versus Maths Score ', #<<
         xaxis = list(range = c(0, 100)),             #<<
         yaxis = list(range = c(0, 100)))             #<<
```

## Coordinated multiple views with plotly

### Using subplot() & highlight_key() from plotly package

```{r}
d <- highlight_key(exam_data)  #<<
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

# Crosstalk methods

## Interactive data table: DT package

```{r}
DT::datatable(exam_data, class= "compact")
```

## Linked brushing

highlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.

bscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document.

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

# Animated data visualisation: gganimate

gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   transition\_*() defines how the data should be spread out and how it relates to itself across time.*

-   *view\_*() defines how the positional scales should change along the animation.

-   shadow\_*() defines how data from other points in time should be presented in the given point in time.*

-   *enter\_*()/exit\_\*() defines how new data should appear and how old data should disappear during the course of the animation.

-   ease_aes() defines how different aesthetics should be eased during transitions.

## Packages to be used

-   gganimate: An ggplot extension for creating animated statistical graphs.

-   gifski converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   gapminder: An excerpt of the data available at Gapminder.org. Here We only want to use its country_colors scheme.

```{r}
pacman::p_load(readxl,
               gganimate,
               gifski,
               gapminder)
```

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

Firstly, a static population bublle plot is built using ggplot2.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

Now, we enable the transition using gganimate. Noted that,

-   transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).

-   ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) + 
  ease_aes('linear')
```

# Visualise large data interactively

```{r}
GDP <- read_csv("data/GDP.csv")
WorldCountry <- read_csv("data/WorldCountry.csv")
```

```{r}
GDP_selected <- GDP %>%
  mutate(Values = as.numeric(`2020`)) %>%
  select(1:3, Values) %>%
  pivot_wider(names_from = `Series Name`,
              values_from = `Values`) %>%
  left_join(y=WorldCountry, by = c("Country Code" = "ISO-alpha3 Code"))
```

-   pivot_wider() of tidyr package is used to split the values in Series Name field into columns.

-   left_join() of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.

```{r}
GDP_selected <- GDP %>%
  mutate(GDP = as.numeric(`2020`)) %>%
  filter(`Series Name` == "GDP (current US$)") %>%
  select(1:2, GDP) %>%
  na.omit()
```

packed bar is a relatively new data visualisation method introduced by Xan Gregg from JMP. It aims to support the need of visualising skewed data over hundreds of categories.

```{r}
pacman::p_load(rPackedBar)

```

```{r}
p = plotly_packed_bar(
  input_data = GDP_selected,
  label_column = "Country Name",
  value_column = "GDP",
  number_rows = 10,
  plot_title = "Top 10 countries by GDP, 2020",
  xaxis_label = "GDP (US$)",
  hover_label = "GDP",
  min_label_width = 0.018,
  color_bar_color = "#00aced",
  label_color = "white")
plotly::config(p, displayModeBar = FALSE)

```
