---
title: "Hands-on Ex04: Fundamentals of Visual Analytics"
author: "Li Ziyi"
date: 4 February 2023
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# Visual Statistics Analysis

Packages that will be focused on for this exercise is mainly ggstatsplot.

```{r}
pacman::p_load(ggstatsplot, 
               tidyverse)
```

```{r}
exam <- read_csv("Data/Exam_data.csv")
```

```{r}
gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

## Visual for two-sample mean test using ggbetweenstats()

To build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

## Oneway ANOVA test using ggbetweenstats()

ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

## Significant test of correlation: ggscatterstats()

A visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

## Significant test of association (dependence) using ggbarstats()

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)

ggbarstats(exam1,
           x = MATHS_bins,
           y = GENDER)
```

## Toyota Corolla Case Study

The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

```{r}
pacman::p_load(readxl, 
               performance, 
               parameters, 
               see)
```

```{r}
car_resale <- read_xls("Data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

To calibrate a multiple linear regression model using lm() from base stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Multicollinearity

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### Check normality assumption

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

### Check homogeneity of variances

```{r}
check_h <- check_heteroscedasticity(model1)

plot(check_h)
```

### Complete check

```{r}
check_model(model1)
```

### Visualise parameters of a regression model

-   plot() from see package

-   parameters() from parameters package

```{r}
plot(parameters(model1))
```

-   ggcoefstats() from ggstatplot package

```{r}
ggcoefstats(model1,
            output = "plot")
```

# Visualising Uncertainty

## Using ggplot2 methods

```{r}
pacman::p_load(tidyverse, 
               plotly, 
               crosstalk, 
               DT, 
               ggdist, 
               gganimate)
```

A point estimate is a single number, such as a mean. Uncertainty is expressed as standard error, confidence interval, or credible interval

```{r}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
knitr::kable(head(my_sum), format = 'html')
```

To reveal the standard error of mean maths score by race.

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean 
          maths score by rac")
```

To plot out the 95% confidence interval:

The error bars is sorted by the average maths score.

## Using ggdist

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +   #<<
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")

```

To make use of some arguments customization.

```{r}
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")

```

To make use of stat_gradientinterval() from ggdist.

```{r}
# exam %>%
#   ggplot(aes(x = RACE, 
#              y = MATHS)) +
#   stat_gradientinterval(   
#     fill = "skyblue",      
#     show.legend = TRUE     
#   ) +                        
#   labs(
#     title = "Visualising confidence intervals of mean math score",
#     subtitle = "Gradient + interval plot")

```

## Using ungeviz package with Hypothetical Outcome Plots (HOPs)

```{r}
devtools::install_github("wilkelab/ungeviz")
```

```{r}
pacman::p_load(ungeviz)
```

```{r}
ggplot(data = exam, 
       (aes(x = factor(RACE),
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    # size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  # `.draw` is a generated column indicating the sample draw
  transition_states(.draw, 1, 3)
```

# Building Funnel Plot with R

Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.

```{r}
pacman::p_load(FunnelPlotR,
               knitr)
```

knitr is used here for building static html tables.

```{r}
covid19 <- read_csv("Data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

## Using FunnelPlotR for the basic plot

The very basic version without any make-up looks like below.

```{r}
funnel_plot(
  numerator = covid19$Positive,
  denominator = covid19$Death,
  group = covid19$`Sub-district`
)

```

```{r}
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR",
  xrange = c(0, 6500),
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases",           
  x_label = "Cumulative COVID-19 Positive Cases",
  y_label = "Cumulative Fatality Rate"
)

```

FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. Some of the key arguments selected for customisation are:

-   limit: plot limits (95 or 99).

-   label_outliers: to label outliers (true or false).

-   Poisson_limits: to add Poisson limits to the plot.

-   OD_adjust: to add overdispersed limits to the plot.

-   xrange and yrange: to specify the range to display for axes, acts like a zoom function.

-   Other aesthetic components such as graph title, axis labels etc.

## Using ggplot2 to customise funnel plot

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)

# To compute the fit.mean
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)

# To compute the lower and upper limits for 95% confidence interval
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, number.ul999, number.seq, fit.mean)


```

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p


```

## Using plotly & ggplot2 to make it interactive

```{r}
fp_ggplotly <- ggplotly(p,
                      tooltip = c("label",
                                  "x",
                                  "y"))

fp_ggplotly
```
