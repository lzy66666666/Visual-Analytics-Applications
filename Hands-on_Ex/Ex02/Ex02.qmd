---
title: "Hands-on Ex02: Beyond ggplot2 Fundamentals"
author: "Li Ziyi"
---

This exercise looks into the usage of tidyverse package mainly.

## Library installation and launching

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
library(pacman)

pacman::p_load(tidyverse, 
               ggrepel)
```

## Data Loading

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## ggplot2 Annotation
To begin with, we use ggplot2 to plot some basic graphs first.
```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

```

Noticed on the overly crowded labels. To avoid text labels from being overlapping with each other, ggrepel is preferred here instead.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## ggplot2 Themes
### Eight built-in themes 
theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().
```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_light() +  
  ggtitle("Distribution of Maths scores") 
```

### ggtheme package
```{r}
library(ggthemes)
```
[ggthemes](https://mran.microsoft.com/snapshot/2016-12-28/web/packages/ggthemes/vignettes/ggthemes.html) provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.
```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_economist() +  
  ggtitle("Distribution of Maths scores") 
```

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_excel() +  
  ggtitle("Distribution of Maths scores") 
```
```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_few() +  
  ggtitle("Distribution of Maths scores") 
```

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_fivethirtyeight() +  
  ggtitle("Distribution of Maths scores") 
```
```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_solarized() +  
  ggtitle("Distribution of Maths scores") 
```
### hrbrthemes package
```{r}
library(hrbrthemes)
```
[hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.
```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_ipsum_ps(axis_title_size = 18,
                 base_size = 15,
                 grid = "Y") +  
  ggtitle("Distribution of Maths scores") 
```
## Composite plot
To create multiple statistical graphs first.
```{r}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
There are several ggplot2 extensions provide functions to compose figure with multiple graphs.

[Patchwork](https://patchwork.data-imaginist.com/index.html) is one of packages that has a very simple syntax where we can create layouts super easily. 

Here’s the general syntax that combines: 
- Two-Column Layout using the Plus Sign +. 
- Parenthesis () to create a subplot group. 
- Two-Row Layout using the Division Sign

```{r}
library(patchwork)
```
```{r}
p1 + p2 / p3
```
```{r}
(p1 / p2) | p3
```
[More](https://patchwork.data-imaginist.com/articles/guides/assembly.html) on how to stack or pack differently using Patchwork.

### Auto-tagging
patchwork provides auto-tagging capabilities, in order to identify subplots in text:
```{r}
((p1 / p2) | p3) +
  plot_annotation(tag_levels = 'I')
```
### Apply themes to all subplots
```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
### Place plots or graphic elements on top or below another plot
```{r}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

