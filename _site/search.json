[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual-Analytics-Applications",
    "section": "",
    "text": "This is a documentation of my full Visual Analytics and Application learning journey."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Ex01/Ex01.html",
    "href": "Hands-on_Ex/Ex01/Ex01.html",
    "title": "Hands-on Ex01: Creating Elegant Graphics with ggplot2",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\nThis p_load() function includes the function of running below commands. More effective nowadays vs the old way below. The pacman in front is to make sure even if the package pacman is not installed.\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Ex01/Ex01.html#using-r-graphics",
    "href": "Hands-on_Ex/Ex01/Ex01.html#using-r-graphics",
    "title": "Hands-on Ex01: Creating Elegant Graphics with ggplot2",
    "section": "3.1 Using R Graphics",
    "text": "3.1 Using R Graphics\n\nhist(exam_data$MATHS)"
  },
  {
    "objectID": "Hands-on_Ex/Ex01/Ex01.html#using-ggplot2",
    "href": "Hands-on_Ex/Ex01/Ex01.html#using-ggplot2",
    "title": "Hands-on Ex01: Creating Elegant Graphics with ggplot2",
    "section": "3.2 Using ggplot2",
    "text": "3.2 Using ggplot2\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = 'green',\n                 fill = 'navy') +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex01/Ex01.html#using-ggplot2-and-group-by-genders",
    "href": "Hands-on_Ex/Ex01/Ex01.html#using-ggplot2-and-group-by-genders",
    "title": "Hands-on Ex01: Creating Elegant Graphics with ggplot2",
    "section": "3.3 Using ggplot2 and group by genders",
    "text": "3.3 Using ggplot2 and group by genders\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = 'grey30')"
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html",
    "href": "Hands-on_Ex/Ex02/Ex02.html",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This exercise looks into the usage of tidyverse package mainly."
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html#library-installation-and-launching",
    "href": "Hands-on_Ex/Ex02/Ex02.html#library-installation-and-launching",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "1 Library installation and launching",
    "text": "1 Library installation and launching\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\nlibrary(pacman)\n\npacman::p_load(tidyverse, \n               ggrepel)"
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html#data-loading",
    "href": "Hands-on_Ex/Ex02/Ex02.html#data-loading",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "2 Data Loading",
    "text": "2 Data Loading\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html#ggplot2-annotation",
    "href": "Hands-on_Ex/Ex02/Ex02.html#ggplot2-annotation",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "3 ggplot2 Annotation",
    "text": "3 ggplot2 Annotation\nTo begin with, we use ggplot2 to plot some basic graphs first.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nNoticed on the overly crowded labels. To avoid text labels from being overlapping with each other, ggrepel is preferred here instead.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html#ggplot2-themes",
    "href": "Hands-on_Ex/Ex02/Ex02.html#ggplot2-themes",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "4 ggplot2 Themes",
    "text": "4 ggplot2 Themes\n\n4.1 Eight built-in themes\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_light() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n4.2 ggtheme package\n\nlibrary(ggthemes)\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_economist() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_excel() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_few() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_fivethirtyeight() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_solarized() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n4.3 hrbrthemes package\n\nlibrary(hrbrthemes)\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n\n\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n\n\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_ipsum_ps(axis_title_size = 18,\n                 base_size = 15,\n                 grid = \"Y\") +  \n  ggtitle(\"Distribution of Maths scores\") \n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "Hands-on_Ex/Ex02/Ex02.html#composite-plot",
    "href": "Hands-on_Ex/Ex02/Ex02.html#composite-plot",
    "title": "Hands-on Ex02: Beyond ggplot2 Fundamentals",
    "section": "5 Composite plot",
    "text": "5 Composite plot\nTo create multiple statistical graphs first.\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nThere are several ggplot2 extensions provide functions to compose figure with multiple graphs.\nPatchwork is one of packages that has a very simple syntax where we can create layouts super easily.\nHere’s the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign\n\nlibrary(patchwork)\n\n\np1 + p2 / p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nMore on how to stack or pack differently using Patchwork.\n\n5.1 Auto-tagging\npatchwork provides auto-tagging capabilities, in order to identify subplots in text:\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n5.2 Apply themes to all subplots\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n5.3 Place plots or graphic elements on top or below another plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html",
    "href": "Hands-on_Ex/Ex03/Ex03.html",
    "title": "Hands-on Ex03",
    "section": "",
    "text": "pacman::p_load(ggiraph,\n               plotly,\n               gganimate,\n               DT,\n               tidyverse,\n               patchwork)\n\nData to be used in this exercise remains the same as the exam data.\n\nexam_data <- read_csv(\"Data/Exam_data.csv\")\n\n\n\n\nTooltip’s interactivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\nBased on hands-on exercise 1, usually this is how a dot plot looks like. And this is a static plot.\n\np_old <- ggplot(data=exam_data,\n                aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\np_old\n\n\n\n\nBy using ggirafe, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nRemark: svg: Scalable vector graphics, the graph would scale accordingly on different devices to preserve the image quality.\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. To present more information inside tooltip, a new data column could be created in order to store the information needed.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nAnd we can customize tooltip aesthetic style by adding css declarations using ops_tooltip().\nBelow, the background color of the tooltip and the font color has been changed.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\n\n\n\nStatistics can be displayed in the tooltip as an advanced way to customise tooltips. A function is built below to compute 90% confidence interval of the mean.\n\ntooltip <- function(y, ymax, accuracy = .01) { \n  mean <- scales::number(y, accuracy = accuracy)  \n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\nAs an instance, elements associated with defined data_id (CLASS) will be highlighted upon mouse moving over. This is the second interactive feature of ggiraph.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nWith this coordinated, when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nTo do that, two steps could be applied:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\nPatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nTake note that the data_id aesthetic is critical to link observations between plots. The tooltip aesthetic is optional but nice to have when hovering the mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#interactive-scatter-plot-using-plot_ly-method",
    "href": "Hands-on_Ex/Ex03/Ex03.html#interactive-scatter-plot-using-plot_ly-method",
    "title": "Hands-on Ex03",
    "section": "2.1 Interactive scatter plot using plot_ly() method",
    "text": "2.1 Interactive scatter plot using plot_ly() method\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE,\n        colors = \"Set1\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#customising-tooltip",
    "href": "Hands-on_Ex/Ex03/Ex03.html#customising-tooltip",
    "title": "Hands-on Ex03",
    "section": "2.2 Customising tooltip",
    "text": "2.2 Customising tooltip\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ', #<<\n         xaxis = list(range = c(0, 100)),             #<<\n         yaxis = list(range = c(0, 100)))             #<<"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Ex03/Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Ex03",
    "section": "2.3 Coordinated multiple views with plotly",
    "text": "2.3 Coordinated multiple views with plotly\n\n2.3.1 Using subplot() & highlight_key() from plotly package\n\nd <- highlight_key(exam_data)  #<<\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Ex03/Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Ex03",
    "section": "3.1 Interactive data table: DT package",
    "text": "3.1 Interactive data table: DT package\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#linked-brushing",
    "href": "Hands-on_Ex/Ex03/Ex03.html#linked-brushing",
    "title": "Hands-on Ex03",
    "section": "3.2 Linked brushing",
    "text": "3.2 Linked brushing\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document.\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Ex03/Ex03.html#packages-to-be-used",
    "href": "Hands-on_Ex/Ex03/Ex03.html#packages-to-be-used",
    "title": "Hands-on Ex03",
    "section": "4.1 Packages to be used",
    "text": "4.1 Packages to be used\n\ngganimate: An ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. Here We only want to use its country_colors scheme.\n\n\npacman::p_load(readxl,\n               gganimate,\n               gifski,\n               gapminder)\n\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\nFirstly, a static population bublle plot is built using ggplot2.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\nNow, we enable the transition using gganimate. Noted that,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) + \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html",
    "href": "Hands-on_Ex/Ex04/Ex04.html",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "",
    "text": "Packages that will be focused on for this exercise is mainly ggstatsplot.\n\npacman::p_load(ggstatsplot, \n               tidyverse)\n\n\nexam <- read_csv(\"Data/Exam_data.csv\")\n\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\nTo build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\nggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\nA visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1,\n           x = MATHS_bins,\n           y = GENDER)\n\n\n\n\n\n\n\nThe purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\npacman::p_load(readxl, \n               performance, \n               parameters, \n               see)\n\n\ncar_resale <- read_xls(\"Data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\nTo calibrate a multiple linear regression model using lm() from base stats of R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\nplot() from see package\nparameters() from parameters package\n\n\nplot(parameters(model1))\n\n\n\n\n\nggcoefstats() from ggstatplot package\n\n\nggcoefstats(model1,\n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-ggplot2-methods",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-ggplot2-methods",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "2.1 Using ggplot2 methods",
    "text": "2.1 Using ggplot2 methods\n\npacman::p_load(tidyverse, \n               plotly, \n               crosstalk, \n               DT, \n               ggdist, \n               gganimate)\n\nA point estimate is a single number, such as a mean. Uncertainty is expressed as standard error, confidence interval, or credible interval\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\nTo reveal the standard error of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\nTo plot out the 95% confidence interval:\nThe error bars is sorted by the average maths score."
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-ggdist",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-ggdist",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "2.2 Using ggdist",
    "text": "2.2 Using ggdist\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +   #<<\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nTo make use of some arguments customization.\n\nexam %>%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nTo make use of stat_gradientinterval() from ggdist.\n\n# exam %>%\n#   ggplot(aes(x = RACE, \n#              y = MATHS)) +\n#   stat_gradientinterval(   \n#     fill = \"skyblue\",      \n#     show.legend = TRUE     \n#   ) +                        \n#   labs(\n#     title = \"Visualising confidence intervals of mean math score\",\n#     subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-ungeviz-package-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-ungeviz-package-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "2.3 Using ungeviz package with Hypothetical Outcome Plots (HOPs)",
    "text": "2.3 Using ungeviz package with Hypothetical Outcome Plots (HOPs)\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE),\n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    # size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-funnelplotr-for-the-basic-plot",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-funnelplotr-for-the-basic-plot",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "3.1 Using FunnelPlotR for the basic plot",
    "text": "3.1 Using FunnelPlotR for the basic plot\nThe very basic version without any make-up looks like below.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",           \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. Some of the key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc."
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-ggplot2-to-customise-funnel-plot",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-ggplot2-to-customise-funnel-plot",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "3.2 Using ggplot2 to customise funnel plot",
    "text": "3.2 Using ggplot2 to customise funnel plot\n\ndf <- covid19 %>%\n  mutate(rate = Death / Positive) %>%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%\n  filter(rate > 0)\n\n# To compute the fit.mean\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n# To compute the lower and upper limits for 95% confidence interval\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, number.ul999, number.seq, fit.mean)\n\n\np <- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Ex04/Ex04.html#using-plotly-ggplot2-to-make-it-interactive",
    "href": "Hands-on_Ex/Ex04/Ex04.html#using-plotly-ggplot2-to-make-it-interactive",
    "title": "Hands-on Ex04: Fundamentals of Visual Analytics",
    "section": "3.3 Using plotly & ggplot2 to make it interactive",
    "text": "3.3 Using plotly & ggplot2 to make it interactive\n\nfp_ggplotly <- ggplotly(p,\n                      tooltip = c(\"label\",\n                                  \"x\",\n                                  \"y\"))\n\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Ex05/Ex05.html",
    "href": "Hands-on_Ex/Ex05/Ex05.html",
    "title": "Hands-on Ex05: Visual Multivariate Analysis",
    "section": "",
    "text": "pacman::p_load(corrplot,\n               tidyverse,\n               ggstatsplot,\n               ggcorrplot,\n               plotly,\n               seriation,\n               dendextend,\n               heatmaply,\n               GGally,\n               parallelPlot)\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nwine <- read.csv(\"Data/wine_quality.csv\")\n\nBeside quality and type, the rest of the variables are numerical and continuous data type.\n\n\n\npairs(wine[, 1:11],\n      upper.panel = NULL)\n\n\n\n\n\n\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).\nCorrgram data visualisation technique is able to overcome this problem, .\n\nggstatsplot::ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\",\n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n) \n\n\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\nTake note the sub-code chunk above can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\nFaceting is not available in ggcorrmat() but can be found in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\nTake note that:\n\nTo build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package.\n\n\n\n\n\nThe default visual object in corrplot used to plot the corrgram is circle.\nThe default layout of the corrgram is a symmetric matrix. We can switch in between “full”, “upper” and “lower” using parameter “type”.\nThe default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\nwine.cor <- cor(wine[, 1:11])\ncorrplot(wine.cor,\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\nSome other parameters that can be changed to customise the layout such as: tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset.\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are: AOE, FPC, hclust and alphabet.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Ex05/Ex05.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Ex05/Ex05.html#heatmap-of-r-stats",
    "title": "Hands-on Ex05: Visual Multivariate Analysis",
    "section": "2.1 heatmap() of R stats",
    "text": "2.1 heatmap() of R stats\nThe arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)"
  },
  {
    "objectID": "Hands-on_Ex/Ex05/Ex05.html#a-cluster-heatmap",
    "href": "Hands-on_Ex/Ex05/Ex05.html#a-cluster-heatmap",
    "title": "Hands-on Ex05: Visual Multivariate Analysis",
    "section": "2.2 A cluster heatmap",
    "text": "2.2 A cluster heatmap\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale = 'column',\n                      margins = c(10, 4),\n                      cexRow = 0.6,\n                      cexCol = 0.8)\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\nThe Happiness Score variable have relatively higher values, therefore it might make other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs. Margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Ex05/Ex05.html#interactive-heatmap-using-heatmaply",
    "href": "Hands-on_Ex/Ex05/Ex05.html#interactive-heatmap-using-heatmaply",
    "title": "Hands-on Ex05: Visual Multivariate Analysis",
    "section": "2.3 Interactive heatmap using heatmaply",
    "text": "2.3 Interactive heatmap using heatmaply\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap. The text label of each raw, on the other hand, is placed on the right hand side of the heat map.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n2.3.1 Data transformation supported by heatmaply()\n\n2.3.1.1 Scaling method\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n2.3.1.2 Normalising method\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. This preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”. Different from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\n2.3.1.3 Percentising method\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank. This is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile. The benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it. Similar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\n\n2.3.2 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n2.3.2.1 Manual approach\nUsing hierarchical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n2.3.2.2 Statistical approach\nThe best clustering method and number of cluster would be determined using the dend_expend() and find_k() functions of dendextend package.\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust <- hclust(wh_d, method = \"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nTherefore,\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n2.3.2.3 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nOr we can choose “GW” instead of “OLO”. GW aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option of ‘mean’ would give the output that is similar to what we would get from heatmap functions in other packages like gplots::heatmap.2\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” would give the dendrograms without any rotations that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\n2.3.3 Color palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\n2.3.4 Other cartographic advantages from heatmaply\nIn the code chunk below, some of following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html",
    "href": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3 Plotting Calendar Heatmap",
    "text": "3 Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n3.2 Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\n3.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\n3.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n3.5 Building the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n3.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n3.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\n3.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "Hands-on_Ex/Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4 Cycle Plot",
    "text": "4 Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n4.1 Data Preparation\n\n4.1.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n4.1.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\n4.1.3 Step 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\n4.1.4 Step 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\n4.2 Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "Take-home_Ex/Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "In this exercise, the basic demographic structure of Singapore top 9 biggest planning areas categorised by gender and age group is being studied.\nData used is a csv file extracted from Department of Statistics, Singapore. The population data snapshot from June 2022 is being studied mainly."
  },
  {
    "objectID": "Take-home_Ex/Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 01",
    "section": "2 Data Preparation",
    "text": "2 Data Preparation\n\n\n\n\n2.1 Data Cleaning\nPreview the downloaded csv file, the data looks generally clean with no “Total” elements inside all columns. This is specifically checked to ensure there won’t be double counting from aggregation blended inside. Inside Tableau, if needed, total could be easily computed by summing up all the rest data.\n\n\n\n\n\nRaw data used\n\n\n\n\n\n\n2.2 Data Loading\nOpen a new Tableau workbook and import data using the csv file prepared above.\nFor easier data manipulation later on, some columns were renamed for easier understanding and convenient usage, e.g. ‘AG’ to ‘Age Group’, ‘Pop’ to ‘Population’ etc.\n\n\n\n\n\nTableau data loading"
  },
  {
    "objectID": "Take-home_Ex/Ex01/Take-home_Ex01.html#data-visualisation",
    "href": "Take-home_Ex/Ex01/Take-home_Ex01.html#data-visualisation",
    "title": "Take-home Exercise 01",
    "section": "3 Data Visualisation",
    "text": "3 Data Visualisation\nAge-sex pyramid was taught be an analytical visualisation commonly used by demographers to reveal the structure of population by gender and age group.\n\n3.1 Overall Singaporean Population Pyramid\nTwo calculated fields are created to facilitate the visualisation preparation:\n    Male:\n    if [Sex]=\"Males\"\n    then [Population]\n    end\n    \n    Female:\n    if [Sex]=\"Females\"\n    then [Population]\n    end\nTo produce the desired visualisation, follow below steps:\n\nDrag the ‘Age Group’ from Data panel into Rows bar.\nSort the ‘Age Group’ by clicking the white downwards pointing arrow, choose ‘Sort’ and sort by ‘Alphabetic’ in descending order.\nDrag the line item ‘5_to_9’ inside the worksheet from ‘Age Group’ column to one line above ‘0_to_4’. With this, the age group should have been sorted in a descending manner entirely.\nDrag the ‘Population’ from Data panel into Columns bar twice. Two ‘SUM(Population)’ should be seen in Columns’ bar. This step is to facilitate the pyramid making. Whereby the left side will be intended to use for female population visualisation and the right side will be intended to use to male population visualisation.\nRight click the axis of the ‘Population’ on the left and edit axis. Choose the option of ‘Reversed’ under ‘Scale’. This will reverse the axis on the left. Rename the axis on the left to ‘Female’.\nRight click the axis on the right. Edit the axis and rename it to ‘Male’.\n\nThere is a pyramid shape built now. Proceeding next to isolate each gender’s population from the other.\n\nCreate two newly calculated measures named ‘Male Color’ and ‘Female Color’. This is to facilitate the visualisation of pyramid later.\nMale Color: \nstr(if [Sex]=\"Males\" \nthen 1 \nelse 0 \nend)\n\nFemale Color: \nstr(if [Sex]=\"Females\" \nthen 1 \nelse 0 \nend)\nDrag the ‘Female Color’ from Data panel into Marks section under the ‘Color’ button from the first ‘SUM(Population)’. Choose a color that you would like to assign to Female population data (1). Here, color pink is used. When the data is not ‘Female’ (0), color grey is used.\nSimilarly, drag the ‘Male Color’ from Data panel and do the same but put it under under the second ‘SUM(Population)’. Choose a color that you would like to assign to Male population data (1). Here, color blue is used. When the data is not ‘Male’ (0), color grey is used to align with the color used in ‘Female Color’.\nFor better analysis usage, under ‘Marks’ section for both ‘SUM(Population)’, ‘Allow labels to overlap other marks’ is chosen under ‘Label’. This will enable us to see all population data on the chart.\nChoose ‘Entire View’ on the top menu to allow bigger chart being presented when in full screen mode.\nRename the tab with an informative title.\n\nTherefore, a population pyramid of Singapore has been completed. See below.\n\n\n\n\n\nPopulation pyramid of Singapore\n\n\n\n\n\n\n3.2 Selection of Nine Planning Areas\nFor this take-home exercise, nine planning areas are supposed to be chosen and presented on a single view.\nTo find out which nine areas to work on, it’s more of my interest to filter based on each of their total population. Below actions are taken in order to achieve that.\n\nCreate a new worksheet.\nDrag the ‘Population’ values from Data panel into Columns bar.\nDrag the ‘Planning Area’ text from Data panel into Rows bar.\nSort the ‘Planning Area’ by clicking the white downwards pointing arrow, choose ‘Sort’ and sort by ‘Field’ in descending order. Choose the field to be sorted by ‘Population’ from the drop-down list. The aggregation we use here remains ‘Sum’.\n\nThis would enable us to visualise the top planning areas according to each of their total area population. To make the list of top area more clearly, parameters and additional calculated fields are created.\nCreation of parameter ‘Top Planning Areas’.\n\n\n\n\n\nParameter: Top planning area\n\n\n\n\nCreation of set ‘Top N Planning Area’ derived from item ‘Planning Area’ from the Data panel by right clicking it:\n\n\n\n\n\nSet: Top N Planning Area\n\n\n\n\nCreation of calculated field ‘Labels’. This label is to be displayed inside the table later for easier readability.\n    if [Top N Planning Area]\n    then \"Top \" + str([Top Planning Area]) + \" Planning Areas\"\n    else \"Others\"\n    end\nWith these, below chart is completed.\n\n\n\n\n\nTop 9 planning area by total population\n\n\n\n\nFrom here, the nine areas that are chosen to study on are:\n\nBedok,\nTampines,\nJurong West,\nSengkang,\nWoodlands,\nHougang,\nYishun,\nChoa Chu Kang,\nPunggol.\n\n\n\n3.3 Trellis Display of Population Pyramid of The Nine Planning Areas\nIn this exercise, the nine planning areas are requested to be presented on a single view. To do that, a trellis display will be applied. Following below steps that will lead us to the desired output.\n\nDuplicate the worksheet ‘PA comparison of Female and Male population in Singapore broken down by age group 2022’.\nRename the worksheet to ‘Trellis comparison of Female and Male population in Top 9 Population Areas of Singapore broken down by age group 2022’.\nDrag the ‘Planning Area’ text from Data panel into Columns bar.\nDrag the ‘Planning Area’ text from Data panel into Filters section and tick the chosen nine areas only.\n\nThe trellis display is therefore completed.\n\n\n\n\n\nTop 9 planning area population pyramid\n\n\n\n\n\n\n3.4 Final Dashboard\nThe final dashboard is produced by putting together the three important worksheets. Here, three worksheets have been chosen to present together in one view to complete the whole story.\n\n\n\n\n\nTop 9 planning area population pyramid"
  },
  {
    "objectID": "Take-home_Ex/Ex01/Take-home_Ex01.html#observation-and-insights",
    "href": "Take-home_Ex/Ex01/Take-home_Ex01.html#observation-and-insights",
    "title": "Take-home Exercise 01",
    "section": "4 Observation and Insights",
    "text": "4 Observation and Insights\nThis part is the write-up requested. Words count: 447 words.\n\n4.1 “Constrictive” pyramid (or “negative growth” pyramid)\nThe population pyramid of Singapore observed from the figure above is narrowed at the bottom younger ages, typical for many developed countries in the world. Usually, country of this population pyramid type tends to have a lower birth rate and a lower death rate thanks to prevalent high level of education and accessible health care services.\nThis observation is in line with many incentive measures from the government seen, for example, policies like birth bonuses, child benefits and even tax credits.\n\n\n4.2 The population pyramid of Singapore from 2022 remains like the one from 2017.\nFrom this link shared by prof, the population pyramid of Singapore in 2022 still look very alike in how it was in 2017, despite of much effort from government on improving fertility rate.\nThis is indeed a concerning topic. Such constrictive pyramid indicates a higher dependency ratio (a ratio related to the number of children and older persons to the working-age population), which implies potential work force shortage in the future. Consequentely, that might result in seriously negative economic impact like reduction in taxation and heavier burden on health care industry.\n\n\n4.3 Females outnumber males in Singapore Based on June 2022 data.\nThis trend is observed in majority age groups. Zooming into each group, only for age 19 and below, number of males is observed to be higher. This trend is observed in majority age groups. Zooming into each group, only for age 19 and below, number of males is observed to be higher. The trend also applies to the nine areas that we have chosen to study on. Without more than sufficient research, there are some unproved personal assumptions that might lead to this result:\n\nMales tend to have a higher mortality rate especially at an older age group, mainly due to higher probability of possessing an unhealthy life habit like smoking or heavy drinking.\nA possible relatively higher rate of approval for immigration applications from foreign young females. This might account for some partial efforts from government on improving the fertility rate of Singapore.\n\n\n\n4.4 Punggol and Sengkang each has slightly different population pyramid from the rest of chosen areas’.\nThanks to the Trellis plot, a comparison between the nine areas looks much easier. From the dashboard, Punggol and Sengkang seem to have a relatively larger base (newly born babies) and middle part (working adults) than the rest. This observation tends to prove the point of view that these two areas tend to have higher percentages of young working couples and babies. Hence, Punggol has recently been dubbed as Singapore’s baby town, according to a news report from The Straits Times."
  },
  {
    "objectID": "Take-home_Ex/Ex01/Take-home_Ex01.html#reflection",
    "href": "Take-home_Ex/Ex01/Take-home_Ex01.html#reflection",
    "title": "Take-home Exercise 01",
    "section": "5 Reflection",
    "text": "5 Reflection\nThis is my first attempt on building and publishing . Along the journey, I have been learning from many of my mistakes. E.g. only after building the whole dashboard, I realised there was better data set for me to use and work on (csv preferred over xlsx, if both available). And the very first draft of dashboard looked decent but was only as good as a graph that can be viewed but cannot be analyzed with. Countless attempts of rework and revised versions were created, with much practice time invested.\nNevertheless, I am excited of this continuous learning journey ahead. I look forward to improving my analytics skills using Tableau and R to further improve this exercise with more depth."
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 02",
    "section": "",
    "text": "The requirement of this exercise is to critic the submission that revealed demographic structure of Singapore at nine planning areas from one of my classmates in terms of clarity and aesthetics, prepare a sketch for the alternative design by using the data visualisation design principles and best practices learned from Lesson 1 and 2. Eventually, the original design will be remade below by using ggplot2 and its extensions together with tidyverse packages from R.\nOriginal dashboard prepared could be retrieved through this link.\nBelow is a snapshot of the dashboard.\n\n\n\n\n\n\n\n\nOriginal Dashboard"
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#clarity",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#clarity",
    "title": "Take-home Exercise 02",
    "section": "2.1 Clarity",
    "text": "2.1 Clarity\n\n2.1.1 Missing a well worded title\nBy looking at the dashboard itself in full screen mode, there are insufficient information on what message this chart is trying to relay.\nAdditionally, nine planning areas’ demographic structure has been shown indeed. The tableau public dashboard, however, is published using the name of ‘Singapore Population distribution by age’. Misunderstanding might be raised as people might wrongly conclude that there are only nine areas in total in Singapore, based on this dashboard.\n\n\n2.1.2 Misalignment in x-axis across nine plots\nFor the chosen nine areas’ plots, some different scales are observed in the x-axis (population count). Misleading visual representation originated from the graph might result in wrong conclusion being made.\n\n\n2.1.3 Weak analytics capabilities\nDespite the pyramid shape of each of the nine areas has been plotted, the dashboard seems to be short of analytics capabilities overall. A meaningful benchmark seems to be missing here. It might be helpful to improve on this through providing reference on how the overall Singapore population pyramid looks like."
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#aesthetics",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#aesthetics",
    "title": "Take-home Exercise 02",
    "section": "2.2 Aesthetics",
    "text": "2.2 Aesthetics\n\n2.2.1 Usage of an unrecommended color\nInside the dashboard, males population is being represented with a color similar to dark khaki. A color like this that is similar to ‘puke yellow’ is discouraged to be used, according to the class discussion during week 2 lecture.\n\n\n2.2.2 Over-packed y-axis ticks\nGiven the granularity of this study, there are many age groups to be presented on the y-axis. However, the y-axis on the current dashboard is too packed with little to no space in between.\n\n\n2.2.3 Repeated appearance of x & y-axis across all plots\nThe same x & y-axis are used across all nine plannings. Due to the complexity from the data, the dense axes seem to be distracting especially for plots inside the second and third rows and columns."
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-source",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-source",
    "title": "Take-home Exercise 02",
    "section": "4.1 Data source",
    "text": "4.1 Data source\nFor this exercise, the data source remained the same as what was used in exercise 01."
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#libraries-to-be-used",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#libraries-to-be-used",
    "title": "Take-home Exercise 02",
    "section": "4.2 Libraries to be used:",
    "text": "4.2 Libraries to be used:\nIn this exercise, main libraries to be used are listed below. pacman is used to check on and ensure the installation of packages.\n\nlibrary(pacman)\n\npacman::p_load(tidyverse,\n               ggplot2,\n               ggrepel,\n               ggthemes,\n               patchwork,\n               dplyr)"
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-loading",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-loading",
    "title": "Take-home Exercise 02",
    "section": "4.3 Data loading:",
    "text": "4.3 Data loading:\nLoad the csv file below for our usage later.\n\npopulation <- read_csv('Data/SG_Population_Jun2022.csv')\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home Exercise 02",
    "section": "4.4 Data wrangling",
    "text": "4.4 Data wrangling\nAs a good practice, the structure of the raw data is inspected to identify if any data manipulation would be beneficial for our usage later on:\n\nstr(population)\n\nspc_tbl_ [75,696 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ PA  : chr [1:75696] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr [1:75696] \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ AG  : chr [1:75696] \"0_to_4\" \"0_to_4\" \"0_to_4\" \"0_to_4\" ...\n $ Sex : chr [1:75696] \"Males\" \"Males\" \"Males\" \"Males\" ...\n $ FA  : chr [1:75696] \"<= 60\" \">60 to 80\" \">80 to 100\" \">100 to 120\" ...\n $ Pop : num [1:75696] 0 10 20 60 10 0 0 0 20 50 ...\n $ Time: num [1:75696] 2022 2022 2022 2022 2022 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   PA = col_character(),\n  ..   SZ = col_character(),\n  ..   AG = col_character(),\n  ..   Sex = col_character(),\n  ..   FA = col_character(),\n  ..   Pop = col_double(),\n  ..   Time = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nFor easier data manipulation and better visualisation effect, the raw data is duplicated below.\n\npop_temp  <- population\n\nTo keep the age groups arranged in a sorted manner, the format of Age Group column (‘AG’) will be transformed from text to factor. This would enable us to perform necessary adjustment in sorting to get the desired output.\n\npop_temp$AG <- as.factor(pop_temp$AG)\nlevels(pop_temp$AG)\n\n [1] \"0_to_4\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"    \"25_to_29\"   \n [6] \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"    \"5_to_9\"     \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nAs can be seen above, the age group ‘5_to_9’ is not falling in the right place. To correct this, a manual swap is done below.\n\npop_temp$AG <- factor(pop_temp$AG,levels(pop_temp$AG)[c(1,10,2:9,11:19)])\nlevels(pop_temp$AG)\n\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nFor the ease of visualisation the population of the two genders side by side, an extra column is prepared such that the population of females would be recorded as values with negative signs, while the population of males would be in positive signs.\nConsequently, the female population would be on the left-hand-side and the male population would be on the right-hand-side.\n\npop_temp$Pop_abs <- ifelse(pop_temp$Sex == \"Males\",\n                        pop_temp$Pop,\n                        -1*pop_temp$Pop)"
  },
  {
    "objectID": "Take-home_Ex/Ex02/Take-home_Ex02.html#visualisation",
    "href": "Take-home_Ex/Ex02/Take-home_Ex02.html#visualisation",
    "title": "Take-home Exercise 02",
    "section": "4.5 Visualisation",
    "text": "4.5 Visualisation\n\n4.5.1 Population pyramid of Singapore\nggplot is the main package that is used to plot the desired chart.\n\np1 <- \nggplot(data=pop_temp,\n       aes(x=AG,\n           y=Pop_abs,\n           fill = Sex)) +\n  geom_bar(data=subset(pop_temp, Sex == \"Males\"),stat = \"identity\") +\n    geom_bar(data=subset(pop_temp, Sex == \"Females\"),stat = \"identity\") +\n  xlab(\"Age Group\") +\n  ylab(NULL) +\n  coord_flip() +\n  scale_y_continuous(breaks = seq(-200000, 200000, 50000), \n                      labels = paste0(as.character(c(seq(200, 0, -50), seq(5, 200, 50))),\"k\")) + \n  ggtitle(\"Females vs Males population of Singapore by age group 2022\") +\n  labs(caption = \"Demographic information as of Jun 2022\") +\n  scale_fill_discrete(name=\"\") +\n  theme_economist() + \n  theme(legend.position = \"bottom\",\n        plot.title = element_text(size = 15,\n                                  hjust = 0.5,\n                                  margin = margin(0,0,10,0)),\n        axis.title.y = element_text(vjust = 2.5))\n\np1\n\n\n\n\nWith the overall Singapore population pyramid available, the next question to answer would be: which are the nine areas to be studied for this exercise?\nTo answer this, the population is aggregated by planning areas. Duplicate the required data and save as an individual dataset.\n\npop_temp_pa <- pop_temp %>% \n  group_by(PA) %>% \n  summarise(total_pop = sum(Pop)) %>% \n  arrange(desc(total_pop))\n\n\n\n4.5.2 Population distribution by planning areas\nPopulation of each area is displayed using bar chart. With this, the distribution of population by areas is easily visible.\n\np2 <- \nggplot(data=pop_temp_pa,\n       aes(x=reorder(PA, +total_pop),\n           y=total_pop)) + \n  geom_col() +\n  xlab(NULL) +\n  ylab(NULL) +\n  ggtitle(\"Population of Singapore by planning areas 2022\") +\n  labs(caption = \"Demographic information as of Jun 2022\") +\n  coord_flip() +\n  scale_y_continuous(breaks = seq(0, 300000, 50000), \n                      labels = paste0(as.character(c(seq(0, 300, 50))),\"k\"),\n                     expand = c(0, 0)) +\n  scale_x_discrete(expand = c(0.01, 0)) +\n  theme_economist() +\n  theme(plot.title = element_text(size = 15,\n                                  hjust = 0.5,\n                                  margin = margin(0,0,10,0)),\n        axis.text.y = element_text(size = 10))\n\np2\n\n\n\n\n\n\n4.5.3 Population pyramid of nine selected planning areas\nUsing the above chart, it is obvious that the top nine planning areas with largest population are:\n\nBedok,\nTampines,\nJurong West,\nSengkang,\nWoodlands,\nHougang,\nYishun,\nChoa Chu Kang,\nPunggol.\n\nConsidering their rather significant population numbers, further study of population pyramid would be conducted on them.\n\ntop_9 = c(\"Bedok\",\n          \"Tampines\",\n          \"Jurong West\",\n          \"Sengkang\",\n          \"Woodlands\",\n          \"Hougang\",\n          \"Yishun\",\n          \"Choa Chu Kang\",\n          \"Punggol\")\n\npop_top_9 = pop_temp %>% \n              filter(pop_temp$PA %in% top_9)\n\nBy filtering the overall Singapore data set and following the same approach on plotting the overall Singapore population pyramid, the nine chosen areas’ population pyramid are therefore presented below:\n\np3 <- \nggplot(data=pop_top_9,\n       aes(x=AG,\n           y=Pop_abs,\n           fill = Sex)) +\n  geom_bar(data=pop_top_9,stat = \"identity\") +\n  xlab(\"Age Group\") +\n  ylab(NULL) +\n  coord_flip() +\n  facet_wrap( ~ PA) + \n  scale_y_continuous(breaks = seq(-15000, 15000, 5000), \n                     labels = paste0(as.character(c(seq(15, 0, -5), seq(5, 15, 5))),\"k\")) + \n  ggtitle(\"Females vs Males population in Top 9 Population Areas of Singapore by age group 2022\") +\n  labs(caption = \"Demographic information as of Jun 2022\") +\n  scale_fill_discrete(name=\"\") +\n  theme_economist() + \n  theme(legend.position = \"bottom\",\n        plot.title = element_text(size = 15,\n                                  hjust = 0.5,\n                                  margin = margin(0,0,10,0)),\n        # axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 10)),\n        axis.title.y = element_text(vjust = 2.5),\n        strip.text = element_text(vjust = 1))\n\np3\n\n\n\n\n\n\n4.5.4 Final dashboard\nTo complete the story within one dashboard, three graphs above are composed into one using Patchwork.\n\n(p1 + p2) / p3"
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html",
    "title": "Take-home Ex03",
    "section": "",
    "text": "For this assignment, the salient patterns of the resale prices of public housing properties by residential towns and estates in Singapore will be explored using dataset taken from Data.gov.sg.\nIf you would like to read the conclusion straight, please click Section 4 to reach the bottom of this study.\n\n\nFor this exercise,\n\ntidyverse is the main package to be used for data processing\nDT is the package to be used for interactive data preview\nggstatsplot is the packge to be used for statistical analysis and visualisation\nggiraph, gganimate and gifski are packages to enable interactive data visualisation\nOther packages are for make-up mainly\n\n\npacman::p_load(tidyverse,\n               DT,\n               ggstatsplot,\n               ggiraph,\n               gganimate,\n               gifski,\n               ggthemes)\n\n\n\n\n\nflat_full <- read_csv(\"Data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n\nDT::datatable(flat_full,\n              class =\"cell-border stripe\")\n\n\n\n\n\n\nThrough the preview of the dataset, certain data processing would be beneficial for easier analysis later on. E.g. the ‘month’ column will be split into two columns ‘year_’ and ‘month_’. Information like price per square meter and remaining number of years on the lease will also be calculated.\n\n\n\n\nflat_temp <- flat_full %>%\n  separate(month,\n           into = c(\"year_\", \"month_\"),\n           sep = \"-\",\n           convert = TRUE) %>% \n  mutate(price_psqm = resale_price / floor_area_sqm)\n\nflat_temp[\"rem_lease_yrs\"] = (99 - (2022 - flat_temp$lease_commence_date))\n\n\nDT::datatable(flat_temp,\n              class =\"cell-border stripe\")"
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html#three-sample-mean-test",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html#three-sample-mean-test",
    "title": "Take-home Ex03",
    "section": "3.1 Three-sample mean test",
    "text": "3.1 Three-sample mean test\n\nggbetweenstats(\n  data = flat_2022_3types,\n  x = flat_type,\n  y = resale_price,\n  type = \"np\",\n  plot.type = \"boxviolin\",\n  title = \"Non-parametric mean test for 3, 4 & 5-room HDB\",\n  xlab = \"Flat type\",\n  ylab =\"Resale price\") +\n  theme_economist() +\n  theme(axis.title.y = element_text(vjust = 2.5))\n\n\n\n\nFigure 2: three-sample mean test\n\n\n\n\nUsing a non-parametric test, from the result p = 0 < 0.05, it can be concluded that the resale price distribution does not follow a normal distribution."
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html#median-resale-price-trend-in-2022",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html#median-resale-price-trend-in-2022",
    "title": "Take-home Ex03",
    "section": "3.2 Median resale price trend in 2022",
    "text": "3.2 Median resale price trend in 2022\nTo look at the resale price trend in 2022, 2022 resale transaction data is grouped by flat type and month for easier visualisation.\n\nflat_by_mth <- flat_2022_3types %>% \n  group_by(flat_type, month_) %>% \n  summarise(total_sales = n(),\n            median_sales_price = median(resale_price),\n            median_house_size_sqm = median(floor_area_sqm),\n            median_remaining_lease_yrs = median(rem_lease_yrs),\n            max_sales_price = max(resale_price),\n            min_sales_price = min(resale_price)) %>% \n  arrange(desc(total_sales))\n\n\nflat_by_mth$tooltip <- c(paste0(\n  \"Flat type: \", flat_by_mth$flat_type,\n  \"\\n Median resales price: \", flat_by_mth$median_sales_price\n))\n\np2 <- ggplot(data = flat_by_mth,\n             aes(x = month_, \n                 y = median_sales_price, \n                 colour = flat_type)) +\n        geom_point_interactive(aes(tooltip = flat_by_mth$tooltip)) +\n        geom_smooth() +\n        scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +\n        scale_x_continuous(breaks = seq_along(month.abb),\n                           labels = month.abb) +\n        theme_economist() +\n        theme(axis.title.y = element_text(vjust = 2.5),\n              legend.position = \"right\") +\n  labs(x = NULL,\n       y = \"Median resale price\") +\n  ggtitle(\"Median resale price trend in 2022 for 3, 4 and 5 ROOM HDB\")\n\n\ngirafe(\n  ggobj = p2,\n  width_svg = 12\n)\n\n\n\n\nFigure 3: median resale price trend\n\n\n\nBased on the point plot, it is observed that the median resale transaction price for all three flat types has been on an increasing trend throughout the whole year of 2022. This indeed aligns with my experience as a house tenant for the year, during which most of room rental or purchase contracts have seen significant surges.\nBesides, the price increment from adding one more room is roughly $100,000."
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html#resale-price-psm-by-town-for-each-flat-type",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html#resale-price-psm-by-town-for-each-flat-type",
    "title": "Take-home Ex03",
    "section": "3.3 Resale price psm by town for each flat type",
    "text": "3.3 Resale price psm by town for each flat type\nTo visualise the price distribution by towns, a boxplot is chosen here to present summary statistics all in one panel.\n\nggplot(flat_2022_3types,\n       aes(x = town, \n           y = price_psqm,\n           color = town)) +\n  geom_boxplot() +\n  facet_wrap(~ flat_type, nrow = 3) +\n  labs(title = \"Flat Resale Price (psm) by Town for 3, 4, 5-room HDB flats\",\n       x = NULL,\n       y = \"Resale Price ($ psm)\") +\n  guides(color = FALSE) +\n  theme_economist() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.text.x = element_text(vjust = 0.5,\n                                   angle = 60,\n                                   size = 8),\n        axis.title.y = element_text(size=15,\n                                    vjust = 2.5),\n        panel.spacing = unit(3, \"line\"))\n\n\n\n\nFigure 4: resale price psm by town\n\n\n\n\nUsing the chart, the resale price psm for one town remain largely the same across three flat types.\nFor 3-room type, the median resale price psm are rather close for all towns. The maximum resale price psm for 3-room type was seen in Bukit Merah area and the minimum resale unit price was most likely seen in Toa Payoh.\nFor 4-room type, the median resale price psm in Central area and in Queenstown were rather higher than most of the rest areas.\nFor 5-room type, the median resale price psm in Central area were extremely high, while the rest of areas’ were relatively close.\nWhat’s more, the price psm for each flat type could vary widely even within the same area, as can be seen from the difference between max and min values."
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html#median-resales-price-psm-by-town-for-each-storey-range",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html#median-resales-price-psm-by-town-for-each-storey-range",
    "title": "Take-home Ex03",
    "section": "3.4 Median resales price psm by town for each storey range",
    "text": "3.4 Median resales price psm by town for each storey range\nTo visualise the potential impact from the location (town) and the storey range, a heatmap is chosen here to cross examine multivariate data. This is because heatmaps are generally good for showing variance across multiple variables to reveal patterns.\n\nflat_heatmap <- flat_2022_3types %>% \n  group_by(town, storey_range) %>% \n  summarise(total_sales = n(),\n            median_sales_price = median(resale_price),\n            median_house_size_sqm = median(floor_area_sqm),\n            median_remaining_lease_yrs = median(rem_lease_yrs)) %>% \n  arrange(desc(total_sales))\n\n\nheatmap <- ggplot(data = flat_heatmap, \n                  mapping = aes(x = town, \n                                y = storey_range,\n                                fill = median_sales_price)) +\n            geom_tile() +\n  labs(title = \"Median resales price per square meter by town and storey for 3, 4 & 5-Room HDB flat\", \n       x = NULL, \n       y = \"Storey\") +\n  scale_fill_gradient(name = \"Price per square meter\",\n                      low = \"#F2F2F2\",\n                      high = \"#00532F\")+\n  theme_economist() +\n  theme(axis.text.x = element_text(angle = 60,\n                                   vjust = 0.5,\n                                   size = 8),\n        axis.title.y = element_text(vjust = 2.5),\n        legend.position = \"right\",\n        legend.text = element_text(size = 6),\n        legend.title = element_text(size = 8))\n\nheatmap\n\n\n\n\nFigure 5: heatmap by town and storey range\n\n\n\n\nBased on the heatmap produced, it is generally true that higher storey units tends to have a better price psm, as illustrated from the darker green on higher storeys.\nHowever, for some unpopular towns like Choa Chu Kang, Woodlands, Jurong West, Pasir Ris, Punggol, Sembawang and Yishun, the price psm difference do not seem significant between higher and lower storey units.\nAdditionally, it can be observed that resale flats in Bukit Timah and Yishun are much lower rised compared to the rest of towns. Especially, the highest unit observed in Bukit Timah was only 15-storey. On the other hand, resales flats in Central Area are the highest with storey higher than 50 available. Besides, the price psm for 30-stroey in Central Area were mostly highest comparing to other towns."
  },
  {
    "objectID": "Take-home_Ex/Ex03/Take-home_Ex03.html#resales-price-per-psm-against-remaining-lease-years-throughout-2022",
    "href": "Take-home_Ex/Ex03/Take-home_Ex03.html#resales-price-per-psm-against-remaining-lease-years-throughout-2022",
    "title": "Take-home Ex03",
    "section": "3.5 Resales price per psm against remaining lease years throughout 2022",
    "text": "3.5 Resales price per psm against remaining lease years throughout 2022\nThe last factor that is being looked into is the the number of years remained on the lease. To isolate the potential impact from different month of the year (e.g. bonus payout, school holidays or holiday seasons), a scatter plot enabled by animation of transition of months is presented below.\n\np3 <-\nggplot(flat_2022_3types,\n       aes(x = rem_lease_yrs,\n           y = price_psqm,\n           colour = flat_type)) +\n  geom_point() +\n  labs(title = \"Resale price per square meter against remaining lease years\",\n       x = \"Remaining Lease (Years)\",\n       y = \"Resale price ($ psm)\",\n       fill =\"Flat type\",\n       caption = \"Month of 2022: {frame_time}\") +\n  theme_economist() +\n  geom_smooth(method=\"lm\",\n              se = FALSE,\n              color = \"mediumorchid1\",\n              formula = y ~ x) +\n  theme(plot.title = element_text(size = 12,\n                                  hjust = 0),\n        axis.title.x = element_text(size = 12,\n                                    vjust = 0.5),\n        axis.title.y = element_text(size = 12,\n                                    vjust = 2.5),\n        legend.position = \"none\",\n        panel.spacing = unit(2, \"line\")) +\n  facet_grid(flat_type ~ .) +\n  transition_time(flat_2022_3types$month_) +\n  ease_aes('linear')\n\nanimate(p3,\n        nframes = 12,\n        fps = 0.5)\n\n\n\n\nFigure 6: scatterplot animation by month\n\n\n\n\nAccording to the chart, throughout 2022 from Janurary to December, it’s certain that the resale price psm increases along the number of years remaining on the lease.\nWhat is also observed was that most of resale transactions for those with less than 50 years on the lease were 3-room flat mainly.\nFurthermore, relatively more transactions are seen particularly for those with the remaining lease above than 90 years."
  },
  {
    "objectID": "In-class_Ex/Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/Ex03/In-class_Ex03.html",
    "title": "In-class Ex03",
    "section": "",
    "text": "1 Installing and loading R packages\nPackages that will be installed and loaded: ggiraph, plotly, gganimate, DT, tidyverse, patchwork. Noted that it is recommended to load tidyverse last so as to avoid some potential conflicting packages being used.\n\npacman::p_load(ggiraph,\n               plotly,\n               gganimate,\n               DT,\n               tidyverse,\n               patchwork)\n\n\n\n2 Importing data\n\nexam_data <- read_csv(\"Data/Exam_data.csv\")\n\n\n\n3 Tooltip effect with tooltip aesthetic (ggirafe)\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\nBased on hands-on exercise 1, usually this is how a dot plot looks like. And this is a static plot.\n\np_old <- ggplot(data=exam_data,\n                aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\np_old\n\n\n\n\nBy using ggirafe, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nRemark: svg: Scalable vector graphics, the graph would scale accordingly on different devices to preserve the image quality.\n\n\n4 Multiple information on tooltip\nTo present more information inside tooltip, a new data column could be created in order to store the information needed.\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nEnd\nTesting"
  },
  {
    "objectID": "In-class_Ex/Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 04",
    "section": "",
    "text": "pacman::p_load(plotly,\n               DT, \n               patchwork,\n               tidyverse,\n               ggstatsplot,\n               readxl,\n               performance,\n               parameters,\n               see,\n               gtsummary)"
  },
  {
    "objectID": "In-class_Ex/Ex04/In-class_Ex04.html#two-sample-mean-test-using-ggbetweenstats",
    "href": "In-class_Ex/Ex04/In-class_Ex04.html#two-sample-mean-test-using-ggbetweenstats",
    "title": "In-class Exercise 04",
    "section": "2.1 Two-sample mean test using ggbetweenstats()",
    "text": "2.1 Two-sample mean test using ggbetweenstats()\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"p\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "In-class_Ex/Ex04/In-class_Ex04.html#build-a-visual-for-significant-test-of-correlation-using-ggscatterstats",
    "href": "In-class_Ex/Ex04/In-class_Ex04.html#build-a-visual-for-significant-test-of-correlation-using-ggscatterstats",
    "title": "In-class Exercise 04",
    "section": "2.2 Build a visual for Significant Test of Correlation using ggscatterstats()",
    "text": "2.2 Build a visual for Significant Test of Correlation using ggscatterstats()\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = TRUE,\n  )\n\n\n\n\n\ncar_resale <- read_xls(\"Data/ToyotaCorolla.xls\",\n                       \"data\")\n\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\nlm is an original R function building a linear regression model.\n\ntbl_regression(model,\n               intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,636,783\n-3,150,331, -2,123,236\n<0.001\n    Age_08_04\n-14\n-35, 7.1\n0.2\n    Mfg_Year\n1,315\n1,059, 1,571\n<0.001\n    KM\n-0.02\n-0.03, -0.02\n<0.001\n    Weight\n19\n17, 21\n<0.001\n    Guarantee_Period\n28\n3.8, 52\n0.023\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nmodel_n <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model_n)\nplot(check_n)\n\n\n\n\n\ncheck_h <- check_heteroscedasticity(model_n)\nplot(check_h)\n\n\n\n\n\nggcoefstats(model_n, \n            output = \"plot\")"
  },
  {
    "objectID": "Take-home_Ex/Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Ex04/Take-home_Ex04.html",
    "title": "Take-home Ex04",
    "section": "",
    "text": "For this assignment, the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade will be uncovered with visual analytics. Dataset is taken from Department of Statistics Singapore.\n\n\nFor this exercise,\n\ntidyverse is the main package to be used for data processing\nDT is the package to be used for interactive data preview\nggstatsplot is the packge to be used for statistical analysis and visualisation\nggiraph, gganimate and gifski are packages to enable interactive data visualisation\nOther packages are for make-up mainly\n\n\npacman::p_load(tidyverse,\n               DT,\n               readxl,\n               ggiraph,\n               gganimate,\n               ggthemes,\n               remotes,\n               ggbraid)\n\n\n\n\n\ntrade_export_temp <- read_excel(\"Data/Merchandise trade by region_market.xlsx\",\n                       sheet = \"T1\") \n\ntrade_import_temp <- read_excel(\"Data/Merchandise trade by region_market.xlsx\",\n                       sheet = \"T2\") \n\nhead(trade_import_temp)\n\n# A tibble: 6 × 566\n  ...1   ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12 ...13\n  <chr>  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 Theme… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n2 Subje… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n3 Topic… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n4 Table… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n5 <NA>   <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n6 Data … Chec… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n# … with 553 more variables: ...14 <chr>, ...15 <chr>, ...16 <chr>,\n#   ...17 <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>,\n#   ...22 <chr>, ...23 <chr>, ...24 <chr>, ...25 <chr>, ...26 <chr>,\n#   ...27 <chr>, ...28 <chr>, ...29 <chr>, ...30 <chr>, ...31 <chr>,\n#   ...32 <chr>, ...33 <chr>, ...34 <chr>, ...35 <chr>, ...36 <chr>,\n#   ...37 <chr>, ...38 <chr>, ...39 <chr>, ...40 <chr>, ...41 <chr>,\n#   ...42 <chr>, ...43 <chr>, ...44 <chr>, ...45 <chr>, ...46 <chr>, …\n\n\n\ncolnames(trade_import_temp) <- as.character(unlist(trade_import_temp[9,]))\ncolnames(trade_export_temp) <- as.character(unlist(trade_export_temp[9,]))\n\nhead(trade_export_temp)\n\n# A tibble: 6 × 566\n  `Data Series`  2023 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 Theme: Trade … <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n2 Subject: Merc… <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n3 Topic: Export… <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n4 Table Title: … <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n5 <NA>           <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n6 Data last upd… Check … <NA>    <NA>    <NA>    <NA>    <NA>    <NA>    <NA>   \n# … with 557 more variables: `2022 May` <chr>, `2022 Apr` <chr>,\n#   `2022 Mar` <chr>, `2022 Feb` <chr>, `2022 Jan` <chr>, `2021 Dec` <chr>,\n#   `2021 Nov` <chr>, `2021 Oct` <chr>, `2021 Sep` <chr>, `2021 Aug` <chr>,\n#   `2021 Jul` <chr>, `2021 Jun` <chr>, `2021 May` <chr>, `2021 Apr` <chr>,\n#   `2021 Mar` <chr>, `2021 Feb` <chr>, `2021 Jan` <chr>, `2020 Dec` <chr>,\n#   `2020 Nov` <chr>, `2020 Oct` <chr>, `2020 Sep` <chr>, `2020 Aug` <chr>,\n#   `2020 Jul` <chr>, `2020 Jun` <chr>, `2020 May` <chr>, `2020 Apr` <chr>, …\n\n\n\ntrade_export_temp <- trade_export_temp[c(11:(nrow(trade_export_temp)-23)),]\nexport_vector <- rep(\"Export\",\n                     nrow(trade_export_temp))\n\ntrade_export_temp$trade <- export_vector\nhead(trade_export_temp)\n\n# A tibble: 6 × 567\n  `Data Series`  2023 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 5823.5  6217.5  6394.2  6653.9  7091.9  7931    6731.2  7508.6 \n2 Asia (Million… 34646.8 39734.8 37973.2 40500.8 45605.1 44106.2 46129.5 46328.8\n3 Europe (Milli… 5384    4924.4  5025.2  5121.5  5155.1  6109.6  6250.6  5455.3 \n4 Oceania (Mill… 2844.5  3034.8  3243.1  3114.5  3453.3  3608.4  3916.1  3669.6 \n5 Africa (Milli… 876.3   1088.6  1527    1185.6  1201.8  1608.5  1097.6  1214.7 \n6 European Unio… 4535    4137.1  4243.4  4298.1  4065.4  5020.5  5497    4609.4 \n# … with 558 more variables: `2022 May` <chr>, `2022 Apr` <chr>,\n#   `2022 Mar` <chr>, `2022 Feb` <chr>, `2022 Jan` <chr>, `2021 Dec` <chr>,\n#   `2021 Nov` <chr>, `2021 Oct` <chr>, `2021 Sep` <chr>, `2021 Aug` <chr>,\n#   `2021 Jul` <chr>, `2021 Jun` <chr>, `2021 May` <chr>, `2021 Apr` <chr>,\n#   `2021 Mar` <chr>, `2021 Feb` <chr>, `2021 Jan` <chr>, `2020 Dec` <chr>,\n#   `2020 Nov` <chr>, `2020 Oct` <chr>, `2020 Sep` <chr>, `2020 Aug` <chr>,\n#   `2020 Jul` <chr>, `2020 Jun` <chr>, `2020 May` <chr>, `2020 Apr` <chr>, …\n\n\n\ntrade_import_temp <- trade_import_temp[c(11:(nrow(trade_import_temp)-23)),]\nimport_vector <- rep(\"Import\",\n                     nrow(trade_import_temp))\n\ntrade_import_temp$trade <- import_vector\nhead(trade_import_temp)\n\n# A tibble: 6 × 567\n  `Data Series`  2023 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 6267.4  6901.5  7529.4  7666.4  7995.9  8633.8  7879.7  8024   \n2 Asia (Million… 30174   33611.7 34733.7 36120.9 37696.3 40911.9 43214.2 42507.2\n3 Europe (Milli… 6427.8  7541.8  7242.8  7475.9  8167.6  7433.2  8300.5  7300.2 \n4 Oceania (Mill… 983.3   1399.9  664.4   1329.8  1544.6  935.9   1060.6  1141.8 \n5 Africa (Milli… 541.1   414.9   483.6   589.9   395     551.2   574.4   675.9  \n6 European Unio… 4580.9  5058.8  4961.4  4685.2  5145.8  5131    5233.5  5135.8 \n# … with 558 more variables: `2022 May` <chr>, `2022 Apr` <chr>,\n#   `2022 Mar` <chr>, `2022 Feb` <chr>, `2022 Jan` <chr>, `2021 Dec` <chr>,\n#   `2021 Nov` <chr>, `2021 Oct` <chr>, `2021 Sep` <chr>, `2021 Aug` <chr>,\n#   `2021 Jul` <chr>, `2021 Jun` <chr>, `2021 May` <chr>, `2021 Apr` <chr>,\n#   `2021 Mar` <chr>, `2021 Feb` <chr>, `2021 Jan` <chr>, `2020 Dec` <chr>,\n#   `2020 Nov` <chr>, `2020 Oct` <chr>, `2020 Sep` <chr>, `2020 Aug` <chr>,\n#   `2020 Jul` <chr>, `2020 Jun` <chr>, `2020 May` <chr>, `2020 Apr` <chr>, …\n\n\n\nnames(trade_export_temp)[1] <- \"Market_\"\nnames(trade_import_temp)[1] <- \"Market_\"\n\nhead(trade_export_temp)\n\n# A tibble: 6 × 567\n  Market_        2023 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 5823.5  6217.5  6394.2  6653.9  7091.9  7931    6731.2  7508.6 \n2 Asia (Million… 34646.8 39734.8 37973.2 40500.8 45605.1 44106.2 46129.5 46328.8\n3 Europe (Milli… 5384    4924.4  5025.2  5121.5  5155.1  6109.6  6250.6  5455.3 \n4 Oceania (Mill… 2844.5  3034.8  3243.1  3114.5  3453.3  3608.4  3916.1  3669.6 \n5 Africa (Milli… 876.3   1088.6  1527    1185.6  1201.8  1608.5  1097.6  1214.7 \n6 European Unio… 4535    4137.1  4243.4  4298.1  4065.4  5020.5  5497    4609.4 \n# … with 558 more variables: `2022 May` <chr>, `2022 Apr` <chr>,\n#   `2022 Mar` <chr>, `2022 Feb` <chr>, `2022 Jan` <chr>, `2021 Dec` <chr>,\n#   `2021 Nov` <chr>, `2021 Oct` <chr>, `2021 Sep` <chr>, `2021 Aug` <chr>,\n#   `2021 Jul` <chr>, `2021 Jun` <chr>, `2021 May` <chr>, `2021 Apr` <chr>,\n#   `2021 Mar` <chr>, `2021 Feb` <chr>, `2021 Jan` <chr>, `2020 Dec` <chr>,\n#   `2020 Nov` <chr>, `2020 Oct` <chr>, `2020 Sep` <chr>, `2020 Aug` <chr>,\n#   `2020 Jul` <chr>, `2020 Jun` <chr>, `2020 May` <chr>, `2020 Apr` <chr>, …\n\n\n\ntrade_export_unpiv <- trade_export_temp[,c(1, 3:14, ncol(trade_export_temp))]\n\nhead(trade_export_unpiv)\n\n# A tibble: 6 × 14\n  Market_        2022 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 6217.5  6394.2  6653.9  7091.9  7931    6731.2  7508.6  6341.1 \n2 Asia (Million… 39734.8 37973.2 40500.8 45605.1 44106.2 46129.5 46328.8 43779.3\n3 Europe (Milli… 4924.4  5025.2  5121.5  5155.1  6109.6  6250.6  5455.3  5141.7 \n4 Oceania (Mill… 3034.8  3243.1  3114.5  3453.3  3608.4  3916.1  3669.6  3671.1 \n5 Africa (Milli… 1088.6  1527    1185.6  1201.8  1608.5  1097.6  1214.7  914.2  \n6 European Unio… 4137.1  4243.4  4298.1  4065.4  5020.5  5497    4609.4  4354.5 \n# … with 5 more variables: `2022 Apr` <chr>, `2022 Mar` <chr>,\n#   `2022 Feb` <chr>, `2022 Jan` <chr>, trade <chr>, and abbreviated variable\n#   names ¹​`2022 Dec`, ²​`2022 Nov`, ³​`2022 Oct`, ⁴​`2022 Sep`, ⁵​`2022 Aug`,\n#   ⁶​`2022 Jul`, ⁷​`2022 Jun`, ⁸​`2022 May`\n\n\n\ntrade_import_unpiv <- trade_import_temp[,c(1, 3:14, ncol(trade_import_temp))]\n\nhead(trade_import_unpiv)\n\n# A tibble: 6 × 14\n  Market_        2022 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 6901.5  7529.4  7666.4  7995.9  8633.8  7879.7  8024    8521.1 \n2 Asia (Million… 33611.7 34733.7 36120.9 37696.3 40911.9 43214.2 42507.2 40534.7\n3 Europe (Milli… 7541.8  7242.8  7475.9  8167.6  7433.2  8300.5  7300.2  7030.8 \n4 Oceania (Mill… 1399.9  664.4   1329.8  1544.6  935.9   1060.6  1141.8  1164.7 \n5 Africa (Milli… 414.9   483.6   589.9   395     551.2   574.4   675.9   352.9  \n6 European Unio… 5058.8  4961.4  4685.2  5145.8  5131    5233.5  5135.8  4551.3 \n# … with 5 more variables: `2022 Apr` <chr>, `2022 Mar` <chr>,\n#   `2022 Feb` <chr>, `2022 Jan` <chr>, trade <chr>, and abbreviated variable\n#   names ¹​`2022 Dec`, ²​`2022 Nov`, ³​`2022 Oct`, ⁴​`2022 Sep`, ⁵​`2022 Aug`,\n#   ⁶​`2022 Jul`, ⁷​`2022 Jun`, ⁸​`2022 May`\n\n\n\ntrade_full <- rbind(trade_export_unpiv,\n                    trade_import_unpiv)\n\nhead(trade_full)\n\n# A tibble: 6 × 14\n  Market_        2022 …¹ 2022 …² 2022 …³ 2022 …⁴ 2022 …⁵ 2022 …⁶ 2022 …⁷ 2022 …⁸\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 America (Mill… 6217.5  6394.2  6653.9  7091.9  7931    6731.2  7508.6  6341.1 \n2 Asia (Million… 39734.8 37973.2 40500.8 45605.1 44106.2 46129.5 46328.8 43779.3\n3 Europe (Milli… 4924.4  5025.2  5121.5  5155.1  6109.6  6250.6  5455.3  5141.7 \n4 Oceania (Mill… 3034.8  3243.1  3114.5  3453.3  3608.4  3916.1  3669.6  3671.1 \n5 Africa (Milli… 1088.6  1527    1185.6  1201.8  1608.5  1097.6  1214.7  914.2  \n6 European Unio… 4137.1  4243.4  4298.1  4065.4  5020.5  5497    4609.4  4354.5 \n# … with 5 more variables: `2022 Apr` <chr>, `2022 Mar` <chr>,\n#   `2022 Feb` <chr>, `2022 Jan` <chr>, trade <chr>, and abbreviated variable\n#   names ¹​`2022 Dec`, ²​`2022 Nov`, ³​`2022 Oct`, ⁴​`2022 Sep`, ⁵​`2022 Aug`,\n#   ⁶​`2022 Jul`, ⁷​`2022 Jun`, ⁸​`2022 May`\n\n\n\ntrade_full_unpivot <- gather(trade_full, key = \"Month_\", value = \"Trade_Amount\", -Market_, -trade)\n\nhead(trade_full_unpivot)\n\n# A tibble: 6 × 4\n  Market_                          trade  Month_   Trade_Amount\n  <chr>                            <chr>  <chr>    <chr>       \n1 America (Million Dollars)        Export 2022 Dec 6217.5      \n2 Asia (Million Dollars)           Export 2022 Dec 39734.8     \n3 Europe (Million Dollars)         Export 2022 Dec 4924.4      \n4 Oceania (Million Dollars)        Export 2022 Dec 3034.8      \n5 Africa (Million Dollars)         Export 2022 Dec 1088.6      \n6 European Union (Million Dollars) Export 2022 Dec 4137.1      \n\n\n\ntrade_full_unpivot$`Trade_Amount` <- as.numeric(trade_full_unpivot$`Trade_Amount`)\n\ntrade_full_unpivot$`Trade_Amount` <- ifelse(grepl(\"Thousand Dollars\", trade_full_unpivot$Market_), trade_full_unpivot$'Trade_Amount' * 1000, trade_full_unpivot$'Trade_Amount' * 1000000)\n\n\nhead(trade_full_unpivot)\n\n# A tibble: 6 × 4\n  Market_                          trade  Month_   Trade_Amount\n  <chr>                            <chr>  <chr>           <dbl>\n1 America (Million Dollars)        Export 2022 Dec   6217500000\n2 Asia (Million Dollars)           Export 2022 Dec  39734800000\n3 Europe (Million Dollars)         Export 2022 Dec   4924400000\n4 Oceania (Million Dollars)        Export 2022 Dec   3034800000\n5 Africa (Million Dollars)         Export 2022 Dec   1088600000\n6 European Union (Million Dollars) Export 2022 Dec   4137100000\n\n\n\ntrade_full_unpivot$Market_ <- gsub(\" \\\\(Thousand Dollars\\\\)|\\\\(Million Dollars\\\\)\", \"\", trade_full_unpivot$Market_)\n\nhead(trade_full_unpivot)\n\n# A tibble: 6 × 4\n  Market_           trade  Month_   Trade_Amount\n  <chr>             <chr>  <chr>           <dbl>\n1 \"America \"        Export 2022 Dec   6217500000\n2 \"Asia \"           Export 2022 Dec  39734800000\n3 \"Europe \"         Export 2022 Dec   4924400000\n4 \"Oceania \"        Export 2022 Dec   3034800000\n5 \"Africa \"         Export 2022 Dec   1088600000\n6 \"European Union \" Export 2022 Dec   4137100000\n\n\n\nunique(trade_full_unpivot$Month_)\n\n [1] \"2022 Dec\" \"2022 Nov\" \"2022 Oct\" \"2022 Sep\" \"2022 Aug\" \"2022 Jul\"\n [7] \"2022 Jun\" \"2022 May\" \"2022 Apr\" \"2022 Mar\" \"2022 Feb\" \"2022 Jan\"\n\n\n\ntrade_clean <- \nseparate(trade_full_unpivot,\n         Month_,\n         into = c(\"Year\", \"Month\"),\n         sep = \" \",\n         convert = TRUE,\n         remove = TRUE)\n\nhead(trade_clean)\n\n# A tibble: 6 × 5\n  Market_           trade   Year Month Trade_Amount\n  <chr>             <chr>  <int> <chr>        <dbl>\n1 \"America \"        Export  2022 Dec     6217500000\n2 \"Asia \"           Export  2022 Dec    39734800000\n3 \"Europe \"         Export  2022 Dec     4924400000\n4 \"Oceania \"        Export  2022 Dec     3034800000\n5 \"Africa \"         Export  2022 Dec     1088600000\n6 \"European Union \" Export  2022 Dec     4137100000\n\n\n\ntrade_clean$Trade_Amount <- ifelse(is.na(trade_clean$Trade_Amount), 0, trade_clean$Trade_Amount)\n\n\ntrade_region <- trade_clean %>% \n  filter(trimws(Market_) %in% c(\"America\", \"Asia\", \"Europe\", \"Oceania\", \"Africa\", \"European Union\"))\n\nhead(trade_region)\n\n# A tibble: 6 × 5\n  Market_           trade   Year Month Trade_Amount\n  <chr>             <chr>  <int> <chr>        <dbl>\n1 \"America \"        Export  2022 Dec     6217500000\n2 \"Asia \"           Export  2022 Dec    39734800000\n3 \"Europe \"         Export  2022 Dec     4924400000\n4 \"Oceania \"        Export  2022 Dec     3034800000\n5 \"Africa \"         Export  2022 Dec     1088600000\n6 \"European Union \" Export  2022 Dec     4137100000\n\n\n\ntrade_region$Market_ <- \n  reorder(trade_region$Market_,\n          -trade_region$Trade_Amount)\n\n\np1 <- ggplot(trade_region,\n           aes(x = factor(Market_),\n               y = Trade_Amount,\n               fill = trade)) +\n  geom_bar(position = \"dodge\",\n           stat = \"identity\") +\n  labs(title = \"$ Amount of bi-lateral trade in Singapore by Markets in 2022\",\n       x = \"Market\",\n       y = \"$ Amount\",\n       fill = \"Trade type\") + \n  theme_economist() +\n  theme(axis.title.y = element_text(vjust = 2.5,\n                                    size = 12),\n        axis.title.x = element_text(vjust = -2.5,\n                                    size = 12))\n\np1\n\n\n\n\nFigure 1: trade_by_region\n\n\n\n\n\n# calculate trade surplus/deficit\ntrade_balance <- trade_clean %>%\n  group_by(Market_, Month, trade) %>%\n  summarize(Trade_Balance = sum(Trade_Amount)) %>%\n  spread(key = trade, value = Trade_Balance, fill = 0) %>% \n  mutate(Surplus_Deficit = Export - Import)\n\n\ninstall_github(\"nsgrantham/ggbraid\")\n\n\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\ntrade_balance$Month <- factor(trade_balance$Month, levels = month_order)\n\n\n# create braid plot\nggplot(trade_balance,\n       aes(x = Month,\n           y = Surplus_Deficit, \n           fill = Market_)) +\n  geom_braid(aes(size = abs(Surplus_Deficit),\n                 color = Surplus_Deficit > 0)) +\n  geom_ribbon(aes(ymin = 0, \n                  ymax = Surplus_Deficit, \n                  fill = Surplus_Deficit > 0), alpha = 0.2) +\n  facet_wrap(~Market_, ncol = 4) +\n  scale_size(range = c(1, 5)) +\n  scale_fill_manual(values = c(\"blue\", \"red\")) +\n  scale_color_manual(values = c(\"blue\", \"red\")) +\n  coord_flip() +\n  labs(title = \"Trade Surplus/Deficit by Market\",\n       x = \"\", \n       y = \"\") +\n  theme_economist() +\n  theme(legend.position = \"bottom\")\n\n\nggplot(trade_balance, \n       aes(x = Month, \n           y = Surplus_Deficit, \n           color = Surplus_Deficit > 0)) +\n  geom_line(aes(linetype = Surplus_Deficit > 0)) +\n  scale_color_manual(values = c(\"red\", \"blue\")) +\n  scale_linetype_manual(values = c(\"dashed\", \"solid\")) +\n  facet_wrap(~ Market_, ncol = 4) +\n\n  # labs(title = \"Trade Surplus/Deficit by Market\",\n  #      x = \"\",\n  #      y = \"\") +\n  theme_economist() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\ntrade_balance3 <- trade_balance %>% \n  filter(Market_ %in% c(\"America \", \"Asia \")) %>% \nggplot(\n       aes(x = Month,\n           y = Surplus_Deficit, \n           )) +\n  geom_col() +\n    # geom_braid(aes(size = abs(Surplus_Deficit),\n  #                color = Surplus_Deficit > 0)) +\n  # geom_ribbon(aes(ymin = 0, \n  #                 ymax = Surplus_Deficit, \n  #                 fill = Surplus_Deficit > 0), alpha = 0.2) +\n  facet_wrap(~Market_)\n\ntrade_balance3"
  }
]